{
  "root": true,
  "ignorePatterns": [],
  "overrides": [
    {
      "files": ["*.ts"],
      "parserOptions": {
        "project": [
          "projects/workshops-app/tsconfig.app.json",
          "projects/workshops-app/tsconfig.spec.json"
        ]
      },
      "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "plugins": [
        "@typescript-eslint/eslint-plugin",
        "eslint-plugin-import",
        "eslint-plugin-jsdoc",
        "eslint-plugin-prefer-arrow"
      ],
      "rules": {
        "@typescript-eslint/interface-name-prefix": "off",
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "explicit",
            "overrides": {
              "accessors": "explicit",
              "constructors": "explicit",
              "parameterProperties": "explicit"
            }
          }
        ],
        "sort-keys": "off",
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/component-selector": [
          "error",
          {
            "type": "element",
            "prefix": "app",
            "style": "kebab-case"
          }
        ],
        "@angular-eslint/contextual-lifecycle": "error",
        "@angular-eslint/directive-class-suffix": "error",
        "@angular-eslint/directive-selector": [
          "error",
          {
            "type": "attribute",
            "prefix": "app",
            "style": "camelCase"
          }
        ],
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": "off",
        "@typescript-eslint/ban-types": [
          "error",
          {
            "types": {
              "Object": {
                "message": "Avoid using the `Object` type. Did you mean `object`?"
              },
              "Function": {
                "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
              },
              "Boolean": {
                "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
              },
              "Number": {
                "message": "Avoid using the `Number` type. Did you mean `number`?"
              },
              "String": {
                "message": "Avoid using the `String` type. Did you mean `string`?"
              },
              "Symbol": {
                "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
              }
            }
          }
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/dot-notation": "error",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-empty-interface": "error",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-inferrable-types": "off",
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off",
        "@typescript-eslint/no-unused-expressions": "error",
        "@typescript-eslint/no-use-before-define": "off",
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            "path": "always",
            "types": "prefer-import",
            "lib": "always"
          }
        ],
        "@typescript-eslint/unified-signatures": "error",
        "complexity": "off",
        "constructor-super": "error",
        "eqeqeq": ["error", "smart"],
        "guard-for-in": "error",
        "id-blacklist": [
          "error",
          "any",
          "Number",
          "number",
          "String",
          "string",
          "Boolean",
          "boolean",
          "Undefined",
          "undefined"
        ],
        "id-match": "error",
        "import/no-deprecated": "error",
        "jsdoc/newline-after-description": "off",
        "jsdoc/no-types": "error",
        "max-classes-per-file": ["error", 1],
        "no-bitwise": "error",
        "no-caller": "error",
        "no-cond-assign": "error",
        "no-console": [
          "error",
          {
            "allow": [
              "log",
              "warn",
              "dir",
              "timeLog",
              "assert",
              "clear",
              "count",
              "countReset",
              "group",
              "groupEnd",
              "table",
              "dirxml",
              "error",
              "groupCollapsed",
              "Console",
              "profile",
              "profileEnd",
              "timeStamp",
              "context"
            ]
          }
        ],
        "no-debugger": "error",
        "no-empty": "off",
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-invalid-this": "off",
        "no-new-wrappers": "error",
        "no-restricted-imports": [
          "error",
          {
            "paths": [
              {
                "name": "rxjs/Rx",
                "message": "Please import directly from 'rxjs' instead"
              }
            ],
            "patterns": [
              {
                "group": ["**/public-api"],
                "message": "Importing from 'public-api' is not allowed."
              },
              {
                "group": ["projects/**"],
                "message": "Importing from 'projects' is not allowed."
              }
            ]
          }
        ],
        "@typescript-eslint/no-shadow": [
          "error",
          {
            "hoist": "all"
          }
        ],
        "no-throw-literal": "error",
        "no-undef-init": "error",
        "no-underscore-dangle": "off",
        "no-unsafe-finally": "error",
        "no-unused-labels": "error",
        "no-var": "error",
        "object-shorthand": "error",
        "one-var": ["error", "never"],
        "prefer-arrow/prefer-arrow-functions": "error",
        "prefer-const": "error",
        "radix": "error",
        "use-isnan": "error",
        "valid-typeof": "off",
        "arrow-body-style": ["error", "as-needed"],
        "arrow-parens": "off",
        "comma-dangle": "off",
        "curly": "error",
        "eol-last": "error",
        "jsdoc/check-alignment": "error",
        "max-len": [
          "error",
          {
            "code": 140
          }
        ],
        "new-parens": "error",
        "no-multiple-empty-lines": "off",
        "no-trailing-spaces": "error",
        "quote-props": ["error", "as-needed"],
        "space-before-function-paren": [
          "error",
          {
            "anonymous": "never",
            "asyncArrow": "always",
            "named": "never"
          }
        ],
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "semi",
              "requireLast": false
            }
          }
        ],
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "error",
          "single",
          { "allowTemplateLiterals": true }
        ],
        "@typescript-eslint/semi": ["error", "always"],
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/consistent-type-definitions": "error",
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": {
              "memberTypes": [
                // Index signature
                "signature",

                // Same rank ordering seems to be broken, but the adjacent overloads
                // rule enforces keeping getters and setters together
                // Fields and properties
                // ["public-static-field", "public-static-get", "public-static-set"],
                "public-static-field",
                "public-static-get",
                // ["protected-static-field", "protected-static-get", "protected-static-set"],
                "protected-static-get",
                "protected-static-field",
                // ["private-static-field", "private-static-get", "private-static-set"],
                "private-static-field",
                "private-static-get",

                // ["public-decorated-field", "public-decorated-get", "public-decorated-set"],
                "public-decorated-field",
                "public-decorated-get",
                // ["public-instance-field", "public-instance-get", "public-instance-set"],
                "public-instance-field",
                "public-instance-get",
                // ["public-abstract-field", "public-abstract-get", "public-abstract-set"],
                "public-abstract-field",
                "public-abstract-get",

                // ["protected-decorated-field", "protected-decorated-get", "protected-decorated-set"],
                "protected-decorated-field",
                "protected-decorated-get",
                // ["protected-instance-field", "protected-instance-get", "protected-instance-set"],
                "protected-instance-field",
                "protected-instance-get",
                // ["protected-abstract-field", "protected-abstract-get", "protected-abstract-set"],
                "protected-abstract-field",
                "protected-abstract-get",

                // ["private-decorated-field", "private-decorated-get", "private-decorated-set"],
                "private-decorated-field",
                "private-decorated-get",
                // ["private-instance-field", "private-instance-get", "private-instance-set"],
                "private-instance-field",
                "private-instance-get",

                // ["public-field", "public-get", "public-set"],
                "public-field",
                "public-get",
                // ["protected-field", "protected-get", "protected-set"],
                "protected-field",
                "protected-get",
                // ["private-field",, "private-get", "private-set"],
                "private-field",
                "private-get",

                // ["static-field", "static-get", "static-set"],
                "static-field",
                "static-get",
                // ["instance-field", "instance-get", "instance-set"],
                "instance-field",
                "instance-get",
                // ["abstract-field", "abstract-get", "abstract-set"],
                "abstract-field",
                "abstract-get",

                // ["decorated-field", "decorated-get", "decorated-set"],
                "decorated-field",
                "decorated-get",

                // ["field", "get", "set"],
                "field",
                "get",

                // Constructors
                "public-constructor",
                "protected-constructor",
                "private-constructor",

                "constructor",

                // Methods
                "public-static-method",
                "protected-static-method",
                "private-static-method",

                "public-instance-method",
                "protected-instance-method",
                "private-instance-method",

                "public-abstract-method",
                "protected-abstract-method",

                "public-method",
                "protected-method",
                "private-method",

                "static-method",
                "instance-method",
                "abstract-method",

                "method"
              ] // ,
              // This would be nice, but not applied to methods. There doesn't seem
              // to be a way to selectively applying the order to different types
              // "order": "alphabetically-case-insensitive"
            }
          }
        ],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "enumMember",
            "format": ["camelCase", "PascalCase"]
          }
        ],
        "brace-style": ["error", "1tbs"]
      }
    },
    {
      "files": ["*.html"],
      "extends": [
        "plugin:@angular-eslint/template/recommended",
        "plugin:@angular-eslint/template/accessibility"
      ],
      "rules": {}
    }
  ]
}
